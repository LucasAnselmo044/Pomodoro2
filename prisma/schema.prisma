generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name            String?
  email          String?  @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  estudySessions  StudySession[]
  tasks          Task[]
  categories     Category[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StudySession {
  id          String   @id @default(cuid())
  userId      String
  startedAt   DateTime @default(now())
  endedAt     DateTime
  duration    Int      // em minutos
  taskId      String?  
  notes       String?  

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  task  Task? @relation(fields: [taskId], references: [id])
}

model Task {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  categoryId  String? // link pra categoria
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id])
  sessions StudySession[]
}

model Category {
  id     String  @id @default(cuid())
  name   String
  color  String? // ex: "#ff0000"
  userId String? // cada user vai ter suas pr√≥prias categorias

  user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]
}
